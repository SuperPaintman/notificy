{"version":3,"sources":["notificy.coffee","notificy.js"],"names":["_typeof","Symbol","iterator","obj","constructor","bind","fn","me","apply","arguments","$","HTML_ESCAPES","Note","NotesContainer","REGEXP_UNESCAPED_HTML","escape","getEscapeHtmlChar","noop","&","<",">","\"","'","`","chr","string","replace","options1","this","options","_getPosition","_update","removeOld","removeAll","remove","add","notes","container","position","prototype","text","note","parent","hide","y","prepend","element","append","push","_born","setTimeout","_this","die","index","indexOf","splice","ref","results","n","slice","notesCount","length","show","$containerPos","containerPos","pos_x","pos_y","x","top","css","left","bottom","right","text1","defaultOptions","content","contentAfter","contentBefore","contentInner","html_class","html_id","on","extend","size","isShow","event","handler","cb","animation","overflow","animate","height","padding-top","padding-bottom","offsetX","offsetY","oldMarginX","oldMarginY","params","_getSize","width","padding","margin","updateSize","parseInt","notificy","type","class","id","max","live","dieDuration","dieAnimation","dieCss","addDuration","jQuery"],"mappings":"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","file":"notificy.min.js","sourcesContent":["###!\n * Notificy jQuery plugin\n * @author  SuperPaintman <SuperPaintmanDeveloper@gmail.com>\n * @site    blog.flatdev.ru\n * @version 1.0\n###\n###*\n * @todo сделайть фабрику для amd / exports / root \n * @todo может возникнуть проблема, с => вместо ->\n * @todo сделать загрузку нотификаций без анимации\n###\n\"use strict\"\ndo ($ = jQuery)->\n    ###*\n     * Неэкранированные HTML эллементы\n     * @constant {RegExp}\n    ###\n    REGEXP_UNESCAPED_HTML = /[&<>\"'`]/g\n\n    ###*\n     * Правила замены HTML эллементов\n     * @constant {Object}\n    ###\n    HTML_ESCAPES =\n        '&': '&amp;'\n        '<': '&lt;'\n        '>': '&gt;'\n        '\"': '&quot;'\n        \"'\": '&#39;'\n        '`': '&#96;'\n\n    ###*\n     * Получение экрана для html токена\n     * @param  {String} chr\n     * @return {String}\n    ###\n    getEscapeHtmlChar = (chr)-> HTML_ESCAPES[chr]\n\n    ###*\n     * Экранирование HTML\n     * @param  {String} string\n     * @return {String}       \n    ###\n    escape = (string)-> string.replace(REGEXP_UNESCAPED_HTML, getEscapeHtmlChar)\n\n    ###*\n     * Функция заглушка\n    ###\n    noop = ->\n\n    class NotesContainer\n        constructor: (@options = {})->\n            @notes = []\n\n            # Init\n            if @options.container and typeof @options.container == \"object\" and @options.container != {}\n                # jQuery object\n                @container = @options.container\n            else\n                # Css selector\n                @container = $( @options.container )\n            \n            @position = @._getPosition()\n\n        ###*\n         * Добавляет новый Note\n         * @param {String|Object}   text    - Текст или jQuery объект\n         * @param {Object}          options - Индивидуальные параметры\n        ###\n        add: (text, options = {})=>\n            note = new Note( text, @options, options )\n            note.parent = @\n\n            note.hide()\n\n            if @position.y == \"top\"\n                @container.prepend( note.element )\n            else\n                @container.append( note.element )\n\n            @notes.push( note )\n\n            # Перемещение его вниз\n            note._born(\"old\", @position.y)\n\n            # Установка смерти нотификации\n            if note.options['live'] >= 0\n                setTimeout =>\n                    note.die()\n                , note.options['live']\n\n            # Обновление\n            @._update()\n\n            return note\n\n        ###*\n         * Удаляет одну нотификацию\n         * @param  {Note}       note\n         * @param  {Boolean}    [die=true]\n         * @return {Boolean}        - Успешно ли удаление\n        ###\n        remove: (note, die = true)=>\n            index = @notes.indexOf( note )\n            if index > -1\n                @notes.splice(index, 1)\n\n                if die then note.die()\n\n                # Обновление\n                @._update()\n                return true\n\n            return false\n\n        ###*\n         * Удаляет все нотификаци\n        ###\n        removeAll: =>\n            for index, note of @notes\n                do (note)=>\n                    @.remove(note, true)\n\n        ###*\n         * Удаляет N последних нотификаций\n         * @param  {Number}       n\n        ###\n        removeOld: (n)=>\n            notes = @notes[...n]\n\n            for index, note of notes\n                do (note)=>\n                    @.remove(note, true)\n\n        ###*\n         * Обновляет все нотификации\n        ###\n        _update: =>\n            notesCount = @notes.length\n            for index, note of @notes\n                note.show()\n\n            if @options['max'] and @options['max'] >= 0\n                if notesCount > @options['max']\n                    @.removeOld( notesCount - @options['max'] )\n\n\n        ###*\n         * Получает позицию контейнера\n         * @return {String} - top-left\n         *                    top-right\n         *                    bottom-left\n         *                    bottom-right\n        ###\n        _getPosition: =>\n            # Получение позиции\n            if @position\n                return @position\n            else if @options['position'] and @options['position'] != \"auto\"\n                switch @options['position']\n                    when \"top-left\"\n                        pos_y = \"top\"\n                        pos_x = \"left\"\n                    when \"top-right\"\n                        pos_y = \"top\"\n                        pos_x = \"right\"\n                    when \"bottom-left\"\n                        pos_y = \"bottom\"\n                        pos_x = \"left\"\n                    else\n                        pos_y = \"bottom\"\n                        pos_x = \"right\"\n\n                return @position = {\n                    x: pos_x\n                    y: pos_y\n                }\n            else\n                $containerPos = \n                    top:    @container.css(\"top\")\n                    left:   @container.css(\"left\")\n                    bottom: @container.css(\"bottom\")\n                    right:  @container.css(\"right\")\n\n                containerPos =\n                    top:    if $containerPos.top     != (\"auto\" or \"\") then true else false\n                    left:   if $containerPos.left    != (\"auto\" or \"\") then true else false\n                    bottom: if $containerPos.bottom  != (\"auto\" or \"\") then true else false\n                    right:  if $containerPos.right   != (\"auto\" or \"\") then true else false\n\n                # Вверху\n                if containerPos.top\n                    pos_y = \"top\"\n                # Внизу\n                else\n                    pos_y = \"bottom\"\n\n                # Cлева\n                if containerPos.left\n                    pos_x = \"left\"\n                # Справа\n                else\n                    pos_x = \"right\"\n\n                return @position = {\n                    x: pos_x\n                    y: pos_y\n                }\n\n    class Note\n        constructor: (@text, defaultOptions = {}, options = {})->\n            if options and typeof options == \"object\" and options != {}\n                @options    = $.extend {}, defaultOptions, options\n            else\n                @options    = defaultOptions\n\n            # Init\n            # @position   = undefined\n            @size       = undefined\n\n            @parent     = undefined\n\n            @isShow     = undefined\n\n            ###*\n             * Класс присваеваемый шаблону\n             * @type {String}\n            ###\n            html_class = \"\"\n            if @options['class'] and @options['class'] != \"\"\n                html_class = \" class=\\\"#{ @options['class'] }\\\"\"\n\n            ###*\n             * ID присваеваемый шаблону\n             * @type {String}\n            ###\n            html_id = \"\"\n            if @options['id'] and @options['id'] != \"\"\n                html_id = \" id=\\\"#{ @options['id'] }\\\"\"\n\n            ###*\n             * Начало шаблона\n             * @type {String}\n            ###\n            contentBefore  = \"<#{ @options['element'] }#{ html_id }#{ html_class }>\"\n            \n            ###*\n             * Конец шаблона\n             * @type {String}\n            ###\n            contentAfter   = \"</#{ @options['element'] }>\"\n\n            ###*\n             * Контент шаблона\n             * @type {String}\n            ###\n            contentInner = @text\n\n            if typeof contentInner == \"string\"\n                switch @options['type']\n                    when \"plain\"\n                        contentInner = escape(contentInner)\n\n                content = contentBefore + contentInner + contentAfter\n                \n                @element = $( content )\n            else\n                content = contentBefore + contentAfter\n\n                @element = $( content ).append( contentInner )\n\n        ###*\n         * Установка эвентов\n        ###\n        on: (event, handler = noop)=>\n            @element.on(event, handler)\n\n        ###*\n         * Удаление нотификацию\n        ###\n        die: (cb = noop)=>\n            if @options['dieCss'] and @options['dieCss'] != \"default\"\n                @element.css(@options['dieCss'])\n            else\n                @element.css {\n                    overflow: \"hidden\"\n                }\n\n\n            if typeof @options['dieAnimation'] is \"object\"\n                @element.animate @options['dieAnimation'], @.options['dieDuration'], =>\n                    @element.remove()\n\n                    # Вызов не через родителя\n                    if @parent then @parent.remove( @, false )\n\n                    cb?()\n            else\n                animation = false\n\n                switch @options['dieAnimation']\n                    when \"fadeOut\"\n                        animation = \"fadeOut\"\n                    when \"hide\"\n                        animation = \"hide\"\n                    when \"slideUp\"\n                        animation = \"slideUp\"\n\n                if animation\n                    @element[ animation ] @.options['dieDuration'] , =>\n                        @element.remove()\n\n                        # Вызов не через родителя\n                        if @parent then @parent.remove( @, false )\n\n                        cb?()\n                # Default\n                else\n                    @element.animate {\n                        height: 0\n                        'padding-top':      \"0px\"\n                        'padding-bottom':   \"0px\"\n                    }, @.options['dieDuration'], =>\n                        @element.remove()\n\n                        # Вызов не через родителя\n                        if @parent then @parent.remove( @, false )\n\n                        cb?()\n\n        ###*\n         * Создает нотификацию\n        ###\n        _born: (pos_x = \"old\", pos_y = \"old\", cb = noop)=>\n            @size   = @._getSize()\n\n            params = {}\n            if pos_x and pos_x != \"old\"\n                offsetX =   @size.width + \n                            @size.padding.left + @size.padding.right\n                # if pos_x == \"left\" \n                #     offsetX += @size.margin.right\n                # else\n                #     offsetX += @size.margin.left\n\n                oldMarginX = @size.margin[ pos_x ]\n                params[\"margin-#{pos_x}\"] = -1 * offsetX\n\n            if pos_y and pos_y != \"old\"\n                offsetY =   @size.height + \n                            @size.padding.top + @size.padding.bottom\n                # if pos_y == \"top\" \n                #     offsetY += @size.margin.bottom\n                # else\n                #     offsetY += @size.margin.top\n\n                oldMarginY = @size.margin[ pos_y ]\n                params[\"margin-#{pos_y}\"] = -1 * offsetY\n\n            if (pos_x and pos_x != \"old\") or (pos_y and pos_y != \"old\")\n                @element.animate params, 0, =>\n                    params = {}\n                    if pos_x and pos_x != \"old\"\n                        params[\"margin-#{pos_x}\"] = oldMarginX\n                    if pos_y and pos_y != \"old\"\n                        params[\"margin-#{pos_y}\"] = oldMarginY\n                    @element.animate params, @options['addDuration'], cb\n\n        ###*\n         * Скрывает нотификацию\n        ###\n        hide: =>\n            if @isShow\n                @element.hide()\n\n                @isShow     = false\n\n            return @\n\n        ###*\n         * Показывает нотификацию\n        ###\n        show: =>\n            unless @isShow\n                @element.show()\n\n                @isShow     = true\n\n            return @\n\n        ###*\n         * Получает размер нотификации\n         * @return {Object} size\n         * @return {Number} size.width\n         * @return {Number} size.height\n        ###\n        _getSize: ->\n            if @size\n                return @size\n            else\n                return @.updateSize()\n\n        ###*\n         * Обновляет размер нотификации\n         * @return {Object} size\n         * @return {Number} size.width\n         * @return {Number} size.height\n        ###\n        updateSize: ->\n            @size = {\n                width:      parseInt @element.width()\n                height:     parseInt @element.height()\n\n                margin: \n                    top:    parseInt @element.css(\"margin-top\")\n                    bottom: parseInt @element.css(\"margin-bottom\")\n                    left:   parseInt @element.css(\"margin-left\")\n                    right:  parseInt @element.css(\"margin-right\")\n                padding:\n                    top:    parseInt @element.css(\"padding-top\")\n                    bottom: parseInt @element.css(\"padding-bottom\")\n                    left:   parseInt @element.css(\"padding-left\")\n                    right:  parseInt @element.css(\"padding-right\")\n            }\n\n            return @size\n\n    # Main\n    $.notificy = (defaultOptions = {})->\n        defaultOptions = $.extend {\n            'type':         \"plain\"    # Html\n            'class':        \"notificy\" # Класс присваеваемый для нотификатора\n            'id':           \"\"         # ID присваеваемый для нотификатора\n            'element':      \"div\"\n            'container':    \"body\"\n            'position':     \"auto\"\n            'max':          -1\n            'live':         3000\n            'dieDuration':  300\n            'dieAnimation': \"default\"\n            'dieCss':       \"default\"\n            'addDuration':  300\n        }, defaultOptions\n\n        return new NotesContainer(defaultOptions)","\n/*!\n * Notificy jQuery plugin\n * @author  SuperPaintman <SuperPaintmanDeveloper@gmail.com>\n * @site    blog.flatdev.ru\n * @version 1.0\n */\n\n/**\n * @todo сделайть фабрику для amd / exports / root \n * @todo может возникнуть проблема, с => вместо ->\n * @todo сделать загрузку нотификаций без анимации\n */\n\"use strict\";\nvar bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n(function($) {\n\n  /**\n   * Неэкранированные HTML эллементы\n   * @constant {RegExp}\n   */\n  var HTML_ESCAPES, Note, NotesContainer, REGEXP_UNESCAPED_HTML, escape, getEscapeHtmlChar, noop;\n  REGEXP_UNESCAPED_HTML = /[&<>\"'`]/g;\n\n  /**\n   * Правила замены HTML эллементов\n   * @constant {Object}\n   */\n  HTML_ESCAPES = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '`': '&#96;'\n  };\n\n  /**\n   * Получение экрана для html токена\n   * @param  {String} chr\n   * @return {String}\n   */\n  getEscapeHtmlChar = function(chr) {\n    return HTML_ESCAPES[chr];\n  };\n\n  /**\n   * Экранирование HTML\n   * @param  {String} string\n   * @return {String}\n   */\n  escape = function(string) {\n    return string.replace(REGEXP_UNESCAPED_HTML, getEscapeHtmlChar);\n  };\n\n  /**\n   * Функция заглушка\n   */\n  noop = function() {};\n  NotesContainer = (function() {\n    function NotesContainer(options1) {\n      this.options = options1 != null ? options1 : {};\n      this._getPosition = bind(this._getPosition, this);\n      this._update = bind(this._update, this);\n      this.removeOld = bind(this.removeOld, this);\n      this.removeAll = bind(this.removeAll, this);\n      this.remove = bind(this.remove, this);\n      this.add = bind(this.add, this);\n      this.notes = [];\n      if (this.options.container && typeof this.options.container === \"object\" && this.options.container !== {}) {\n        this.container = this.options.container;\n      } else {\n        this.container = $(this.options.container);\n      }\n      this.position = this._getPosition();\n    }\n\n\n    /**\n     * Добавляет новый Note\n     * @param {String|Object}   text    - Текст или jQuery объект\n     * @param {Object}          options - Индивидуальные параметры\n     */\n\n    NotesContainer.prototype.add = function(text, options) {\n      var note;\n      if (options == null) {\n        options = {};\n      }\n      note = new Note(text, this.options, options);\n      note.parent = this;\n      note.hide();\n      if (this.position.y === \"top\") {\n        this.container.prepend(note.element);\n      } else {\n        this.container.append(note.element);\n      }\n      this.notes.push(note);\n      note._born(\"old\", this.position.y);\n      if (note.options['live'] >= 0) {\n        setTimeout((function(_this) {\n          return function() {\n            return note.die();\n          };\n        })(this), note.options['live']);\n      }\n      this._update();\n      return note;\n    };\n\n\n    /**\n     * Удаляет одну нотификацию\n     * @param  {Note}       note\n     * @param  {Boolean}    [die=true]\n     * @return {Boolean}        - Успешно ли удаление\n     */\n\n    NotesContainer.prototype.remove = function(note, die) {\n      var index;\n      if (die == null) {\n        die = true;\n      }\n      index = this.notes.indexOf(note);\n      if (index > -1) {\n        this.notes.splice(index, 1);\n        if (die) {\n          note.die();\n        }\n        this._update();\n        return true;\n      }\n      return false;\n    };\n\n\n    /**\n     * Удаляет все нотификаци\n     */\n\n    NotesContainer.prototype.removeAll = function() {\n      var index, note, ref, results;\n      ref = this.notes;\n      results = [];\n      for (index in ref) {\n        note = ref[index];\n        results.push((function(_this) {\n          return function(note) {\n            return _this.remove(note, true);\n          };\n        })(this)(note));\n      }\n      return results;\n    };\n\n\n    /**\n     * Удаляет N последних нотификаций\n     * @param  {Number}       n\n     */\n\n    NotesContainer.prototype.removeOld = function(n) {\n      var index, note, notes, results;\n      notes = this.notes.slice(0, n);\n      results = [];\n      for (index in notes) {\n        note = notes[index];\n        results.push((function(_this) {\n          return function(note) {\n            return _this.remove(note, true);\n          };\n        })(this)(note));\n      }\n      return results;\n    };\n\n\n    /**\n     * Обновляет все нотификации\n     */\n\n    NotesContainer.prototype._update = function() {\n      var index, note, notesCount, ref;\n      notesCount = this.notes.length;\n      ref = this.notes;\n      for (index in ref) {\n        note = ref[index];\n        note.show();\n      }\n      if (this.options['max'] && this.options['max'] >= 0) {\n        if (notesCount > this.options['max']) {\n          return this.removeOld(notesCount - this.options['max']);\n        }\n      }\n    };\n\n\n    /**\n     * Получает позицию контейнера\n     * @return {String} - top-left\n     *                    top-right\n     *                    bottom-left\n     *                    bottom-right\n     */\n\n    NotesContainer.prototype._getPosition = function() {\n      var $containerPos, containerPos, pos_x, pos_y;\n      if (this.position) {\n        return this.position;\n      } else if (this.options['position'] && this.options['position'] !== \"auto\") {\n        switch (this.options['position']) {\n          case \"top-left\":\n            pos_y = \"top\";\n            pos_x = \"left\";\n            break;\n          case \"top-right\":\n            pos_y = \"top\";\n            pos_x = \"right\";\n            break;\n          case \"bottom-left\":\n            pos_y = \"bottom\";\n            pos_x = \"left\";\n            break;\n          default:\n            pos_y = \"bottom\";\n            pos_x = \"right\";\n        }\n        return this.position = {\n          x: pos_x,\n          y: pos_y\n        };\n      } else {\n        $containerPos = {\n          top: this.container.css(\"top\"),\n          left: this.container.css(\"left\"),\n          bottom: this.container.css(\"bottom\"),\n          right: this.container.css(\"right\")\n        };\n        containerPos = {\n          top: $containerPos.top !== (\"auto\" || \"\") ? true : false,\n          left: $containerPos.left !== (\"auto\" || \"\") ? true : false,\n          bottom: $containerPos.bottom !== (\"auto\" || \"\") ? true : false,\n          right: $containerPos.right !== (\"auto\" || \"\") ? true : false\n        };\n        if (containerPos.top) {\n          pos_y = \"top\";\n        } else {\n          pos_y = \"bottom\";\n        }\n        if (containerPos.left) {\n          pos_x = \"left\";\n        } else {\n          pos_x = \"right\";\n        }\n        return this.position = {\n          x: pos_x,\n          y: pos_y\n        };\n      }\n    };\n\n    return NotesContainer;\n\n  })();\n  Note = (function() {\n    function Note(text1, defaultOptions, options) {\n      var content, contentAfter, contentBefore, contentInner, html_class, html_id;\n      this.text = text1;\n      if (defaultOptions == null) {\n        defaultOptions = {};\n      }\n      if (options == null) {\n        options = {};\n      }\n      this.show = bind(this.show, this);\n      this.hide = bind(this.hide, this);\n      this._born = bind(this._born, this);\n      this.die = bind(this.die, this);\n      this.on = bind(this.on, this);\n      if (options && typeof options === \"object\" && options !== {}) {\n        this.options = $.extend({}, defaultOptions, options);\n      } else {\n        this.options = defaultOptions;\n      }\n      this.size = void 0;\n      this.parent = void 0;\n      this.isShow = void 0;\n\n      /**\n       * Класс присваеваемый шаблону\n       * @type {String}\n       */\n      html_class = \"\";\n      if (this.options['class'] && this.options['class'] !== \"\") {\n        html_class = \" class=\\\"\" + this.options['class'] + \"\\\"\";\n      }\n\n      /**\n       * ID присваеваемый шаблону\n       * @type {String}\n       */\n      html_id = \"\";\n      if (this.options['id'] && this.options['id'] !== \"\") {\n        html_id = \" id=\\\"\" + this.options['id'] + \"\\\"\";\n      }\n\n      /**\n       * Начало шаблона\n       * @type {String}\n       */\n      contentBefore = \"<\" + this.options['element'] + html_id + html_class + \">\";\n\n      /**\n       * Конец шаблона\n       * @type {String}\n       */\n      contentAfter = \"</\" + this.options['element'] + \">\";\n\n      /**\n       * Контент шаблона\n       * @type {String}\n       */\n      contentInner = this.text;\n      if (typeof contentInner === \"string\") {\n        switch (this.options['type']) {\n          case \"plain\":\n            contentInner = escape(contentInner);\n        }\n        content = contentBefore + contentInner + contentAfter;\n        this.element = $(content);\n      } else {\n        content = contentBefore + contentAfter;\n        this.element = $(content).append(contentInner);\n      }\n    }\n\n\n    /**\n     * Установка эвентов\n     */\n\n    Note.prototype.on = function(event, handler) {\n      if (handler == null) {\n        handler = noop;\n      }\n      return this.element.on(event, handler);\n    };\n\n\n    /**\n     * Удаление нотификацию\n     */\n\n    Note.prototype.die = function(cb) {\n      var animation;\n      if (cb == null) {\n        cb = noop;\n      }\n      if (this.options['dieCss'] && this.options['dieCss'] !== \"default\") {\n        this.element.css(this.options['dieCss']);\n      } else {\n        this.element.css({\n          overflow: \"hidden\"\n        });\n      }\n      if (typeof this.options['dieAnimation'] === \"object\") {\n        return this.element.animate(this.options['dieAnimation'], this.options['dieDuration'], (function(_this) {\n          return function() {\n            _this.element.remove();\n            if (_this.parent) {\n              _this.parent.remove(_this, false);\n            }\n            return typeof cb === \"function\" ? cb() : void 0;\n          };\n        })(this));\n      } else {\n        animation = false;\n        switch (this.options['dieAnimation']) {\n          case \"fadeOut\":\n            animation = \"fadeOut\";\n            break;\n          case \"hide\":\n            animation = \"hide\";\n            break;\n          case \"slideUp\":\n            animation = \"slideUp\";\n        }\n        if (animation) {\n          return this.element[animation](this.options['dieDuration'], (function(_this) {\n            return function() {\n              _this.element.remove();\n              if (_this.parent) {\n                _this.parent.remove(_this, false);\n              }\n              return typeof cb === \"function\" ? cb() : void 0;\n            };\n          })(this));\n        } else {\n          return this.element.animate({\n            height: 0,\n            'padding-top': \"0px\",\n            'padding-bottom': \"0px\"\n          }, this.options['dieDuration'], (function(_this) {\n            return function() {\n              _this.element.remove();\n              if (_this.parent) {\n                _this.parent.remove(_this, false);\n              }\n              return typeof cb === \"function\" ? cb() : void 0;\n            };\n          })(this));\n        }\n      }\n    };\n\n\n    /**\n     * Создает нотификацию\n     */\n\n    Note.prototype._born = function(pos_x, pos_y, cb) {\n      var offsetX, offsetY, oldMarginX, oldMarginY, params;\n      if (pos_x == null) {\n        pos_x = \"old\";\n      }\n      if (pos_y == null) {\n        pos_y = \"old\";\n      }\n      if (cb == null) {\n        cb = noop;\n      }\n      this.size = this._getSize();\n      params = {};\n      if (pos_x && pos_x !== \"old\") {\n        offsetX = this.size.width + this.size.padding.left + this.size.padding.right;\n        oldMarginX = this.size.margin[pos_x];\n        params[\"margin-\" + pos_x] = -1 * offsetX;\n      }\n      if (pos_y && pos_y !== \"old\") {\n        offsetY = this.size.height + this.size.padding.top + this.size.padding.bottom;\n        oldMarginY = this.size.margin[pos_y];\n        params[\"margin-\" + pos_y] = -1 * offsetY;\n      }\n      if ((pos_x && pos_x !== \"old\") || (pos_y && pos_y !== \"old\")) {\n        return this.element.animate(params, 0, (function(_this) {\n          return function() {\n            params = {};\n            if (pos_x && pos_x !== \"old\") {\n              params[\"margin-\" + pos_x] = oldMarginX;\n            }\n            if (pos_y && pos_y !== \"old\") {\n              params[\"margin-\" + pos_y] = oldMarginY;\n            }\n            return _this.element.animate(params, _this.options['addDuration'], cb);\n          };\n        })(this));\n      }\n    };\n\n\n    /**\n     * Скрывает нотификацию\n     */\n\n    Note.prototype.hide = function() {\n      if (this.isShow) {\n        this.element.hide();\n        this.isShow = false;\n      }\n      return this;\n    };\n\n\n    /**\n     * Показывает нотификацию\n     */\n\n    Note.prototype.show = function() {\n      if (!this.isShow) {\n        this.element.show();\n        this.isShow = true;\n      }\n      return this;\n    };\n\n\n    /**\n     * Получает размер нотификации\n     * @return {Object} size\n     * @return {Number} size.width\n     * @return {Number} size.height\n     */\n\n    Note.prototype._getSize = function() {\n      if (this.size) {\n        return this.size;\n      } else {\n        return this.updateSize();\n      }\n    };\n\n\n    /**\n     * Обновляет размер нотификации\n     * @return {Object} size\n     * @return {Number} size.width\n     * @return {Number} size.height\n     */\n\n    Note.prototype.updateSize = function() {\n      this.size = {\n        width: parseInt(this.element.width()),\n        height: parseInt(this.element.height()),\n        margin: {\n          top: parseInt(this.element.css(\"margin-top\")),\n          bottom: parseInt(this.element.css(\"margin-bottom\")),\n          left: parseInt(this.element.css(\"margin-left\")),\n          right: parseInt(this.element.css(\"margin-right\"))\n        },\n        padding: {\n          top: parseInt(this.element.css(\"padding-top\")),\n          bottom: parseInt(this.element.css(\"padding-bottom\")),\n          left: parseInt(this.element.css(\"padding-left\")),\n          right: parseInt(this.element.css(\"padding-right\"))\n        }\n      };\n      return this.size;\n    };\n\n    return Note;\n\n  })();\n  return $.notificy = function(defaultOptions) {\n    if (defaultOptions == null) {\n      defaultOptions = {};\n    }\n    defaultOptions = $.extend({\n      'type': \"plain\",\n      'class': \"notificy\",\n      'id': \"\",\n      'element': \"div\",\n      'container': \"body\",\n      'position': \"auto\",\n      'max': -1,\n      'live': 3000,\n      'dieDuration': 300,\n      'dieAnimation': \"default\",\n      'dieCss': \"default\",\n      'addDuration': 300\n    }, defaultOptions);\n    return new NotesContainer(defaultOptions);\n  };\n})(jQuery);\n"],"sourceRoot":"/source/"}